// Test case that compares a file generated by polars_excel_writer with a file
// created by Excel.
//
// SPDX-License-Identifier: MIT OR Apache-2.0
//
// Copyright 2022-2025, John McNamara, jmcnamara@cpan.org

use crate::common;

use polars::prelude::*;
use polars_excel_writer::PolarsExcelWriter;
use rust_xlsxwriter::{Format, XlsxError};

// Test setting a format for strings with dtype.
fn create_new_xlsx_file_1(filename: &str) -> Result<(), XlsxError> {
    let df: DataFrame = df!(
        "Col1" => &["Foo", "Foo", "Foo"],
        "Col2" => &[Some(1), None,  Some(3)],
    )?;

    let mut xlsx_writer = PolarsExcelWriter::new();
    let format = Format::new().set_bold();

    xlsx_writer.set_dtype_format(DataType::Int32, format);

    xlsx_writer.write_dataframe(&df)?;
    xlsx_writer.save(filename)?;

    Ok(())
}

// Test setting a format for strings with column type.
fn create_new_xlsx_file_2(filename: &str) -> Result<(), XlsxError> {
    let df: DataFrame = df!(
        "Col1" => &["Foo", "Foo", "Foo"],
        "Col2" => &[Some(1), None,  Some(3)],
    )?;

    let mut xlsx_writer = PolarsExcelWriter::new();
    let format = Format::new().set_bold();

    xlsx_writer.set_column_format("Col2", format);

    xlsx_writer.write_dataframe(&df)?;
    xlsx_writer.save(filename)?;

    Ok(())
}

#[test]
fn dataframe_excelwriter16_1() {
    let test_runner = common::TestRunner::new()
        .set_name("dataframe16")
        .set_function(create_new_xlsx_file_1)
        .unique("1")
        .initialize();

    test_runner.assert_eq();
    test_runner.cleanup();
}

#[test]
fn dataframe_excelwriter16_2() {
    let test_runner = common::TestRunner::new()
        .set_name("dataframe16")
        .set_function(create_new_xlsx_file_2)
        .unique("2")
        .initialize();

    test_runner.assert_eq();
    test_runner.cleanup();
}
