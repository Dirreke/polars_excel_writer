// Test case that compares a file generated by polars_excel_writer with a file
// created by Excel.
//
// SPDX-License-Identifier: MIT OR Apache-2.0
//
// Copyright 2022-2025, John McNamara, jmcnamara@cpan.org

use crate::common;

use polars::prelude::*;
use polars_excel_writer::PolarsExcelWriter;
use rust_xlsxwriter::XlsxError;

// Compare output against target Excel file using PolarsExcelWriter.
fn create_new_xlsx_file_1(filename: &str) -> Result<(), XlsxError> {
    let df: DataFrame = df!(
        "Region" => &["North", "South", "East", "West"],
        "Q1" => &[10, 10, 10, 10],
        "Q2" => &[-10, -10, -10, -10],
        "Q3" => &[10, 10, 10, 10],
        "Q4" => &[-10, -10, -10, -10],
        "Total" => &["=SUM(Table1[@[Q1]:[Q4]])",
                     "=SUM(Table1[@[Q1]:[Q4]])",
                     "=SUM(Table1[@[Q1]:[Q4]])",
                     "=SUM(Table1[@[Q1]:[Q4]])"],
    )?;

    let mut excel_writer = PolarsExcelWriter::new();
    excel_writer.enable_column_formulas("Total");
    excel_writer.write_dataframe(&df)?;

    excel_writer.save(filename)?;

    Ok(())
}

// Test with older/internal formula syntax.
fn create_new_xlsx_file_2(filename: &str) -> Result<(), XlsxError> {
    let df: DataFrame = df!(
        "Region" => &["North", "South", "East", "West"],
        "Q1" => &[10, 10, 10, 10],
        "Q2" => &[-10, -10, -10, -10],
        "Q3" => &[10, 10, 10, 10],
        "Q4" => &[-10, -10, -10, -10],
        "Total" => &["=SUM(Table1[[#This Row],[Q1]:[Q4]])",
                     "=SUM(Table1[[#This Row],[Q1]:[Q4]])",
                     "=SUM(Table1[[#This Row],[Q1]:[Q4]])",
                     "=SUM(Table1[[#This Row],[Q1]:[Q4]])"],
    )?;

    let mut excel_writer = PolarsExcelWriter::new();
    excel_writer.enable_column_formulas("Total");
    excel_writer.write_dataframe(&df)?;

    excel_writer.save(filename)?;

    Ok(())
}

#[test]
fn dataframe_write_excel23_1() {
    let test_runner = common::TestRunner::new()
        .set_name("dataframe23")
        .ignore_calc_chain()
        .unique("1")
        .set_function(create_new_xlsx_file_1)
        .initialize();

    test_runner.assert_eq();
    test_runner.cleanup();
}

#[test]
fn dataframe_write_excel23_2() {
    let test_runner = common::TestRunner::new()
        .set_name("dataframe23")
        .ignore_calc_chain()
        .unique("2")
        .set_function(create_new_xlsx_file_2)
        .initialize();

    test_runner.assert_eq();
    test_runner.cleanup();
}
